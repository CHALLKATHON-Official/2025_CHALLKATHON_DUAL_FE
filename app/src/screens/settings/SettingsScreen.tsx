import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Switch,
  Alert,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { CommonActions } from '@react-navigation/native';
import Card from '../../components/common/Card';
import { Colors } from '../../constants/colors';
import { Typography } from '../../constants/typography';
import { Spacing } from '../../constants/spacing';
import { useDispatch } from 'react-redux';
import { signOut } from '../../store/slices/authSlice';
import { AppDispatch } from '../../store';
import { RootStackParamList } from '../../navigation/types';
import { Feather } from '@expo/vector-icons';

type SettingsScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'Main'>;

const SettingsScreen: React.FC = () => {
  const [notifications, setNotifications] = useState(true);
  const [locationServices, setLocationServices] = useState(true);
  const [autoSync, setAutoSync] = useState(false);
  const [darkMode, setDarkMode] = useState(false);

  const dispatch = useDispatch<AppDispatch>();
  const navigation = useNavigation<SettingsScreenNavigationProp>();

  const handleGoBack = () => {
    navigation.goBack();
  };

  const settingsSections = [
    {
      title: 'Í≥ÑÏ†ï',
      items: [
        {
          id: 'profile',
          title: 'ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥',
          subtitle: 'Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏ†ï',
          icon: 'üë§',
          type: 'navigate',
        },
        {
          id: 'password',
          title: 'ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω',
          subtitle: 'Î≥¥ÏïàÏùÑ ÏúÑÌïú ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω',
          icon: 'üîí',
          type: 'navigate',
        },
        // {
        //   id: 'role',
        //   title: 'Ïó≠Ìï† ÏÑ§Ï†ï',
        //   subtitle: 'ÌôòÏûê / Î≥¥Ìò∏Ïûê Ïó≠Ìï† Î≥ÄÍ≤Ω',
        //   icon: 'üîÑ',
        //   type: 'navigate',
        // },
        {
          id: 'caregiver',
          title: 'Î≥¥Ìò∏Ïûê Ïó∞Îèô',
          subtitle: 'Î≥¥Ìò∏ÏûêÏôÄ Ïó∞ÎèôÌïòÍ∏∞',
          icon: 'ü§ù',
          type: 'navigate',
        },
      ],
    },
    {
      title: 'ÏïåÎ¶º',
      items: [
        {
          id: 'notifications',
          title: 'Ìë∏Ïãú ÏïåÎ¶º',
          subtitle: 'Ïö¥Îèô ÏïåÎ¶º Î∞è ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏',
          icon: 'üîî',
          type: 'switch',
          value: notifications,
          onValueChange: setNotifications,
        },
        // {
        //   id: 'reminders',
        //   title: 'Ïö¥Îèô ÏïåÎ¶º',
        //   subtitle: 'Ï†ïÍ∏∞Ï†ÅÏù∏ Ïö¥Îèô ÏïåÎ¶º',
        //   icon: '‚è∞',
        //   type: 'navigate',
        // },
        {
          id: 'emergency',
          title: 'Í∏¥Í∏â ÏïåÎ¶º',
          subtitle: 'Í∏¥Í∏â ÏÉÅÌô© Ïãú ÏïåÎ¶º',
          icon: 'üö®',
          type: 'navigate',
        },
      ],
    },
    {
      title: 'Í∞úÏù∏Ï†ïÎ≥¥',
      items: [
        // {
        //   id: 'location',
        //   title: 'ÏúÑÏπò ÏÑúÎπÑÏä§',
        //   subtitle: 'Ïã§Ïô∏ Ïö¥Îèô Ïãú ÏúÑÏπò Ï∂îÏ†Å',
        //   icon: 'üìç',
        //   type: 'switch',
        //   value: locationServices,
        //   onValueChange: setLocationServices,
        // },
        {
          id: 'health',
          title: 'Í±¥Í∞ï Îç∞Ïù¥ÌÑ∞',
          subtitle: 'Í±¥Í∞ï Ï†ïÎ≥¥ Í≥µÏú† ÏÑ§Ï†ï',
          icon: '‚ù§Ô∏è',
          type: 'navigate',
        },
        // {
        //   id: 'privacy',
        //   title: 'Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏',
        //   subtitle: 'Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Î∞è ÏÇ¨Ïö©',
        //   icon: 'üõ°Ô∏è',
        //   type: 'navigate',
        // },
      ],
    },
    // {
    //   title: 'Ïï± ÏÑ§Ï†ï',
    //   items: [ ... ],
    // },
    // {
    //   title: 'ÏßÄÏõê',
    //   items: [ ... ],
    // },
  ];

  const handleLogout = () => {
    Alert.alert(
      'Î°úÍ∑∏ÏïÑÏõÉ',
      'Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { text: 'Î°úÍ∑∏ÏïÑÏõÉ', onPress: () => dispatch(signOut()) }
      ]
    );
  };

  const handleDeleteAccount = () => {
    Alert.alert(
      'Í≥ÑÏ†ï ÏÇ≠Ï†ú',
      'Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÎ©¥ Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§. Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { text: 'ÏÇ≠Ï†ú', style: 'destructive', onPress: () => {
          // Í≥ÑÏ†ï ÏÇ≠Ï†ú Î°úÏßÅ
          console.log('Í≥ÑÏ†ï ÏÇ≠Ï†ú');
        }},
      ]
    );
  };

  const renderSettingItem = (item: any) => {
    return (
      <TouchableOpacity
        key={item.id}
        style={styles.settingItem}
        onPress={() => {
          if (item.type === 'navigate') {
            // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î°úÏßÅ
            console.log('Navigate to:', item.id);
          }
        }}
      >
        <View style={styles.settingIcon}>
          <Text style={styles.settingIconText}>{item.icon}</Text>
        </View>
        <View style={styles.settingContent}>
          <Text style={styles.settingTitle}>{item.title}</Text>
          <Text style={styles.settingSubtitle}>{item.subtitle}</Text>
        </View>
        {item.type === 'switch' ? (
          <Switch
            value={item.value}
            onValueChange={item.onValueChange}
            trackColor={{ false: Colors.borderLight, true: Colors.primary + '40' }}
            thumbColor={item.value ? Colors.primary : Colors.textLight}
          />
        ) : (
          <Text style={styles.settingArrow}>‚Ä∫</Text>
        )}
      </TouchableOpacity>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={handleGoBack}>
          <Feather name="chevron-left" size={28} color="#A3A8AF" />
        </TouchableOpacity>
        <View style={styles.headerTextContainer}>
          <Text style={styles.headerTitle}>ÏÑ§Ï†ï</Text>
          <Text style={styles.headerSubtitle}>Ïï± ÏÑ§Ï†ïÏùÑ Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî</Text>
        </View>
      </View>

      <ScrollView 
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {/* Settings Sections */}
        {settingsSections.map((section, sectionIndex) => (
          <View key={sectionIndex} style={styles.section}>
            <Text style={styles.sectionTitle}>{section.title}</Text>
            <Card style={styles.sectionCard}>
              {section.items.map((item, itemIndex) => (
                <View key={item.id}>
                  {renderSettingItem(item)}
                  {itemIndex < section.items.length - 1 && (
                    <View style={styles.divider} />
                  )}
                </View>
              ))}
            </Card>
          </View>
        ))}

        {/* Logout and Delete Account */}
        <View style={styles.dangerSection}>
          <Card style={styles.dangerCard}>
            <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
              <Text style={styles.logoutButtonText}>Î°úÍ∑∏ÏïÑÏõÉ</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.deleteButton} onPress={handleDeleteAccount}>
              <Text style={styles.deleteButtonText}>Í≥ÑÏ†ï ÏÇ≠Ï†ú</Text>
            </TouchableOpacity>
          </Card>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 24,
    paddingBottom: 16,
    backgroundColor: '#F8F9FA',
  },
  backButton: {
    marginRight: 8,
    marginTop: 0,
  },
  headerTextContainer: {
    flex: 1,
  },
  headerTitle: {
    fontSize: 22,
    fontWeight: '700',
    color: '#222',
    marginBottom: 2,
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#A3A8AF',
    fontWeight: '400',
  },
  scrollContent: {
    paddingVertical: Spacing.sm,
    paddingBottom: Spacing.sectionSpacing,
  },
  section: {
    paddingHorizontal: Spacing.paddingLarge,
    marginBottom: Spacing.sectionSpacing,
  },
  sectionTitle: {
    ...Typography.h2,
    color: Colors.textPrimary,
    marginBottom: Spacing.componentSpacing,
    fontWeight: '600',
  },
  sectionCard: {
    padding: 0,
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: Spacing.componentSpacing,
    paddingHorizontal: Spacing.padding,
  },
  settingIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: Colors.secondary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: Spacing.componentSpacing,
  },
  settingIconText: {
    fontSize: 18,
  },
  settingContent: {
    flex: 1,
  },
  settingTitle: {
    ...Typography.body,
    color: Colors.textPrimary,
    fontWeight: '500',
    marginBottom: Spacing.xs,
  },
  settingSubtitle: {
    ...Typography.caption,
    color: Colors.textLight,
  },
  settingArrow: {
    ...Typography.h3,
    color: Colors.textLight,
    fontWeight: '300',
  },
  divider: {
    height: 1,
    backgroundColor: Colors.borderLight,
    marginLeft: 56 + Spacing.componentSpacing,
  },
  dangerSection: {
    paddingHorizontal: Spacing.paddingLarge,
    marginBottom: Spacing.sectionSpacing,
  },
  dangerCard: {
    padding: 0,
  },
  logoutButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: Spacing.componentSpacing,
    paddingHorizontal: Spacing.padding,
  },
  logoutButtonText: {
    ...Typography.body,
    color: Colors.textPrimary,
    fontWeight: '500',
    flex: 1,
  },
  deleteButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: Spacing.componentSpacing,
    paddingHorizontal: Spacing.padding,
  },
  deleteButtonText: {
    ...Typography.body,
    color: '#F44336',
    fontWeight: '500',
    flex: 1,
  },
});

export default SettingsScreen;